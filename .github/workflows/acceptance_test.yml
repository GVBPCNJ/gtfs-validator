name: Rule acceptance tests

on:
  push:
    branches: [ master, new-test-module ]
    paths-ignore:
      - '**.md'
jobs:
  pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-SNAPSHOT
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Persist output-comparator jar
        uses: actions/upload-artifact@v2
        with:
          name: output-comparator-cli
          path: output-comparator/build/libs/output-comparator-${{ steps.prep.outputs.versionTag }}.jar
      - name: Persist gtfs-validator snapshot jar
        uses: actions/upload-artifact@v2
        with:
          name: gtfs-validator-snapshot
          path: main/build/libs/gtfs-validator-${{ steps.prep.outputs.versionTag }}_cli.jar
  download-latest-gtfs-validator-release-jar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - name: Generate download url
        id: set-url
        run: echo ::set-output name=URL::https://github.com/MobilityData/gtfs-validator/releases/download/${{ steps.previoustag.outputs.tag }}/gtfs-validator-${{ steps.previoustag.outputs.tag }}_cli.jar
      - name: Download last release of the validator
        uses: suisei-cn/actions-download-file@v1
        id: gtfs-validator
        with:
          url: ${{ steps.set-url.outputs.URL }}
          target: public/
      - name: Persist reference jar
        uses: actions/upload-artifact@v2
        with:
          name: reference_jar
          path: public/gtfs-validator-${{ steps.previoustag.outputs.tag }}_cli.jar
  fetch-urls:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: pip3 install -r scripts/mobility-database-harvester/requirements.txt
      - name: Get datasets' metadata
        id: set-matrix
        run: |
          python3 scripts/mobility-database-harvester/harvest_latest_versions.py -d datasets_metadata -a gtfs_archives_ids.json -l latest_versions.json
          DATASETS=$(jq . datasets_metadata/latest_versions.json -R)
          echo $DATASETS
          echo "::set-output name=matrix::$DATASETS"
        env:
          TYPE: ${{ secrets.TYPE }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AUTH_URI: ${{ secrets.AUTH_URI }}
          TOKEN_URI: ${{ secrets.TOKEN_URI }}
          AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
          CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
      - name: Persist datasets metadata
        uses: actions/upload-artifact@v2
        with:
          name: datasets_metadata
          path: datasets_metadata
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  get-latest-changes-report:
    needs: [ pack, fetch-urls ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.fetch-urls.outputs.matrix) }}
    steps:
      - name: Retrieve metadata from previous job
        uses: actions/download-artifact@v2
        with:
          name: datasets_metadata
      - name: Download latest changes .jar file from previous job
        uses: actions/download-artifact@v2
        with:
          name: gtfs-validator-snapshot
      - name: Execute jar on each URL from metadata
        run: java -jar gtfs-validator*.jar --url ${{ matrix.url }} --output_base output/${{ matrix.id }} --validation_report_name latest.json
      - name: Persist reports
        uses: actions/upload-artifact@v2
        with:
          name: reports_all
          path: output
#  get-reference-report:
#    needs: [ download-latest-gtfs-validator-release-jar, fetch-urls ]
#    runs-on: ubuntu-latest
#    strategy:
#      matrix: ${{ fromJson(needs.fetch-urls.outputs.matrix) }}
#    steps:
#      - name: Retrieve metadata from previous job
#        uses: actions/download-artifact@v2
#        with:
#          name: datasets_metadata
#      - name: Download reference .jar file from previous job
#        uses: actions/download-artifact@v2
#        with:
#          name: reference_jar
#      - name: Execute jar
#        # the following line will be changed after v3.0 is published without -f CLI parameter
#        run: java -jar gtfs-validator*.jar --url ${{ matrix.url }} --output_base output/${{ matrix.id }} --feed_name ca-test
#      - name: Persist reports
#        uses: actions/upload-artifact@v2
#        with:
#          name: reports_all
#          path: output
#      - name: Persist reports
#        uses: actions/upload-artifact@v2
#        with:
#          name: reports_all
#          path: output
#  compare-outputs:
#    needs: [ get-reference-report, get-latest-changes-report ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download all validation reports
#        uses: actions/download-artifact@v2
#        with:
#          name: reports_all
#      - name: Download output-comparator jar
#        uses: actions/download-artifact@v2
#        with:
#          name: output-comparator-cli
#      - name: Execute output-comparator
#        run: java -jar output-comparator*.jar --percent_invalid_datasets_threshold ${PERCENT_INVALID_DATASETS_THRESHOLD} --new_error_threshold ${NEW_ERROR_THRESHOLD} --report_directory . --reference_report_name report.json --latest_report_name latest.json
#        env:
#          NEW_ERROR_THRESHOLD: 1
#          PERCENT_INVALID_DATASETS_THRESHOLD: 35
#      - name: Persist acceptance test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: acceptance test report
#          path: ./acceptance_report.json
