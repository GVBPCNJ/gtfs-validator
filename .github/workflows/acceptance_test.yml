name: Rule acceptance tests

on:
  push:
    branches: [ master, task/deploy-to-k8s ]
    paths-ignore:
      - '**.md'
jobs:
  push-snapshot-to-gar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-snapshot
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Push snapshot Docker Image to GAR
        uses: par-tec/docker-push-gar-image@v0.0.3
        with:
          image_name: gtfs-validator-repo/gtfs-validator-gke
          image_tag: ${{ steps.prep.outputs.versionTag }}
          docker_context: ./springboot/
          gar_hostname: us-east1-b-docker.pkg.dev
          gar_project: ${{ secrets.GCP_PROJECT_ID }}
          gar_service_account: ${{ secrets.GCP_SA_KEY }}
          tag_latest_version: true
  push-latest-release-to-gar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.previoustag.outputs.tag }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Push latest release Docker Image to GAR
        uses: par-tec/docker-push-gar-image@v0.0.3
        with:
          image_name: gtfs-validator-repo/gtfs-validator-gke
          image_tag: ${{ steps.previoustag.outputs.tag }}
          docker_context: ./
          gar_hostname: us-east1-b-docker.pkg.dev
          gar_project: ${{ secrets.GCP_PROJECT_ID }}
          gar_service_account: ${{ secrets.GCP_SA_KEY }}
          tag_latest_version: true
  set-up-kubernetes-for-snapshot:
    needs: [ push-snapshot-to-gar ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-snapshot
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create GKE snapshot cluster
        run: |
          gcloud container clusters create-auto gtfs-validator-snapshot-cluster --zone us-east1-b
      - name: Substitute values in deployment.yaml
        run: |
          sed -i -e "s|{{VALIDATION_REPORT_BUCKET}}|gtfs-validator-reports|" deployment.yaml
          sed -i -e "s/{{PROJECT_ID}}/${{ secrets.GCP_PROJECT_ID }}/" deployment.yaml
          sed -i -e "s/{{TAG}}/${{ steps.prep.outputs.versionTag }}/" deployment.yaml
          sed -i -e "s/{{DEPLOYMENT_NAME}}/gtfs-validator-snapshot-workload/g" deployment.yaml
          sed -i -e "s/{{SECRET_NAME}}/${{secrets.SNAPSHOT_SECRET_NAME}}/g" deployment.yaml
      - name: Substitute values in service.yaml
        run: |
          sed -i -e "s/{{SERVICE_NAME}}/gtfs-validator-snapshot-service/" service.yaml
          sed -i -e "s/{{WORKLOAD_NAME}}/gtfs-validator-snapshot-workload/" service.yaml
      - name: Authenticate to GKE
        id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: gtfs-validator-snapshot-cluster
          location: us-east1-b
          credentials: ${{ secrets.GCP_SA_KEY }}
      - name: Create secrets
        run: |
          kubectl create secret generic ${{secrets.SNAPSHOT_SECRET_NAME}} --from-literal=TYPE="${{ secrets.TYPE }}" --from-literal=PROJECT_ID="${{ secrets.PROJECT_ID }}" --from-literal=PRIVATE_KEY_ID="${{ secrets.PRIVATE_KEY_ID }}" --from-literal=PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" --from-literal=CLIENT_EMAIL="${{ secrets.CLIENT_EMAIL }}" --from-literal=CLIENT_ID="${{ secrets.CLIENT_ID }}" --from-literal=AUTH_URI="${{ secrets.AUTH_URI }}" --from-literal=TOKEN_URI="${{ secrets.TOKEN_URI }}" --from-literal=AUTH_PROVIDER_X509_CERT_URL="${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}" --from-literal=CLIENT_X509_CERT_URL="${{ secrets.CLIENT_X509_CERT_URL }}"
      - name: Deploy to GKE
        id: deploy-to-gke
        run: kubectl apply -f deployment.yaml
      - name: Expose service
        id: expose-service
        run: kubectl apply -f service.yaml
      - name: Wait a few minutes for service to be up and running
        id: wait
        run: sleep 2m
      - name: Export snapshot service IP
        id: set-snapshot-service-ip
        run: |
          echo $(kubectl get services gtfs-validator-snapshot-service -o json) > info.json
          IP=$(jq -r '.status.loadBalancer.ingress[0] .ip' info.json)
          echo $DATASETS
          echo "::set-output name=ip::$IP"
    outputs:
      ip: ${{ steps.set-snapshot-service-ip.outputs.ip }}
  set-up-kubernetes-for-latest-release:
    needs: [ push-latest-release-to-gar ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create GKE cluster
        run: |
          gcloud container clusters create-auto gtfs-validator-latest-release-cluster --zone us-east1-b
      - name: Substitute values in deployment.yaml
        run: |
          sed -i -e "s|{{VALIDATION_REPORT_BUCKET}}|gtfs-validator-reports|" deployment.yaml
          sed -i -e "s/{{PROJECT_ID}}/${{ secrets.GCP_PROJECT_ID }}/" deployment.yaml
          sed -i -e "s/{{TAG}}/${{ steps.previoustag.outputs.tag }}/" deployment.yaml
          sed -i -e "s/{{DEPLOYMENT_NAME}}/gtfs-validator-latest-release-workload/g" deployment.yaml
          sed -i -e "s/{{SECRET_NAME}}/${{ secrets.LATEST_RELEASE_SECRET_NAME }}/g" deployment.yaml
      - name: Substitute values in service.yaml
        run: |
          sed -i -e "s/{{SERVICE_NAME}}/gtfs-validator-latest-release-workload-service/" service.yaml
          sed -i -e "s/{{WORKLOAD_NAME}}/gtfs-validator-latest-release-workfload/" service.yaml
      - name: Authenticate to GKE
        id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: gtfs-validator-latest-release-cluster
          location: us-east1-b
          credentials: ${{ secrets.GCP_SA_KEY }}
      - name: Create secrets
        run: |
          kubectl create secret generic ${{secrets.LATEST_RELEASE_SECRET_NAME}} --from-literal=TYPE="${{ secrets.TYPE }}" --from-literal=PROJECT_ID="${{ secrets.PROJECT_ID }}" --from-literal=PRIVATE_KEY_ID="${{ secrets.PRIVATE_KEY_ID }}" --from-literal=PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" --from-literal=CLIENT_EMAIL="${{ secrets.CLIENT_EMAIL }}" --from-literal=CLIENT_ID="${{ secrets.CLIENT_ID }}" --from-literal=AUTH_URI="${{ secrets.AUTH_URI }}" --from-literal=TOKEN_URI="${{ secrets.TOKEN_URI }}" --from-literal=AUTH_PROVIDER_X509_CERT_URL="${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}" --from-literal=CLIENT_X509_CERT_URL="${{ secrets.CLIENT_X509_CERT_URL }}"
      - name: Deploy to GKE
        id: deploy-to-gke
        run: kubectl apply -f deployment.yaml
      - name: Expose service
        id: expose-service
        run: kubectl apply -f service.yaml
  fetch-urls:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: pip3 install -r scripts/mobility-database-harvester/requirements.txt
      - name: Get datasets' metadata
        id: set-matrix
        run: |
          python3 scripts/mobility-database-harvester/harvest_latest_versions.py -d datasets_metadata -a gtfs_archives_ids.json -l latest_versions.json
          DATASETS=$(jq . datasets_metadata/latest_versions.json -R)
          echo $DATASETS
          echo "::set-output name=matrix::$DATASETS"
        env:
          TYPE: ${{ secrets.TYPE }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AUTH_URI: ${{ secrets.AUTH_URI }}
          TOKEN_URI: ${{ secrets.TOKEN_URI }}
          AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
          CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
      - name: Persist datasets metadata
        uses: actions/upload-artifact@v2
        with:
          name: datasets_metadata
          path: datasets_metadata
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
#  execute-snapshot-version:
#    needs: [ set-up-kubernetes-for-snapshot, fetch-urls ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Retrieve metadata from previous job
#        uses: actions/download-artifact@v2
#        with:
#          name: datasets_metadata
#      - name: Run snapshot validation on data
#        run: |
#          echo ${{ needs.set-up-kubernetes-for-snapshot.outputs.ip }}
#          export KEYS=$(jq '. | keys[]' latest_versions.json -r)
#          for source in $KEYS;
#          do
#            export SOURCE=$source;
#            export URL=$(jq '.[$SOURCE_NAME]' latest_versions.json --arg SOURCE_NAME $SOURCE -r);
#            echo "http://${{ needs.set-up-kubernetes-for-snapshot.outputs.ip }}/?url=$URL&datasetId=$source&commitSha=${{ github.sha }}&threads=16"
#            curl "http://${{ needs.set-up-kubernetes-for-snapshot.outputs.ip }}/?url=$URL&datasetId=$source&commitSha=${{ github.sha }}&threads=16"
#          done;
#          wait
#  execute-latest-release:
#  download-validation-reports:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up Cloud SDK
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          project_id: ${{ secrets.GCP_PROJECT_ID }}
#          service_account_key: ${{ secrets.GCP_SA_KEY }}
#          export_default_credentials: true
#      - name: Download validation reports folder
#        run: |
#          gsutil -m cp -r "gs://gtfs-validator-reports/commit sha value/" .
#      - name: Explore folder
#        run: |
#          ls -a
#      - name: Persist validation reports
#        uses: actions/upload-artifact@v2
#        with:
#          name: validation_reports
#          path: ./commit sha value
#  delete-snapshot-resources:
#  delete-latest-release-resources:
#  compare validation reports:
