name: Rule acceptance tests

on:
  push:
    branches: [ master, ci/acceptance-tests ]
    paths-ignore:
      - '**.md'
jobs:
  push-snapshot-to-gar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-snapshot
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Push snapshot Docker Image to GAR
        uses: par-tec/docker-push-gar-image@v0.0.3
        with:
          image_name: gtfs-validator-repo/gtfs-validator-gke
          image_tag: ${{ steps.prep.outputs.versionTag }}
          docker_context: ./
          gar_hostname: us-east1-docker.pkg.dev
          gar_project: ${{ secrets.GCP_PROJECT_ID }}
          gar_service_account: ${{ secrets.GCP_SA_KEY }}
          tag_latest_version: true
  push-latest-release-to-gar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.previoustag.outputs.tag }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Package cli app jar with Gradle
        uses: eskatos/gradle-command-action@v1
        env:
          versionTag: ${{ steps.prep.outputs.versionTag }}
        with:
          arguments: shadowJar
      - name: Push latest release Docker Image to GAR
        uses: par-tec/docker-push-gar-image@v0.0.3
        with:
          image_name: gtfs-validator-repo/gtfs-validator-gke
          image_tag: ${{ steps.previoustag.outputs.tag }}
          docker_context: ./
          gar_hostname: us-east1-docker.pkg.dev
          gar_project: ${{ secrets.GCP_PROJECT_ID }}
          gar_service_account: ${{ secrets.GCP_SA_KEY }}
          tag_latest_version: true
  set-up-kubernetes-for-snapshot:
    needs: [ push-snapshot-to-gar ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Prepare version name
        id: prep
        run: |
          VERSION_TAG=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION_TAG=-$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION_TAG=-pr-${{ github.event.number }}
          fi
          if [ ${VERSION_TAG} != ${GITHUB_REF#refs/tags/} ]; then
            VERSION_TAG=v${VERSION_TAG}-sha-${GITHUB_SHA::8}-snapshot
          fi
          echo ::set-output name=versionTag::${VERSION_TAG}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create GKE cluster
        run: |
          gcloud container clusters create-auto gtfs-validator-snapshot-cluster --zone us-east1
      - name: Substitute values in deployment.yaml
        run: |
          sed -i -e "s/{{PROJECT_ID}}/${{ secrets.GCP_PROJECT_ID }}/" deployment.yaml
          sed -i -e "s/{{TAG}}/${{ steps.prep.outputs.versionTag }}/" deployment.yaml
          sed -i -e "s/{{DEPLOYMENT_NAME}}/gtfs-validator-snapshot-workload/g" deployment.yaml
      - name: Substitute values in service.yaml
        run: |
          sed -i -e "s/{{SERVICE_NAME}}/gtfs-validator-snapshot-service/" service.yaml
      - name: Authenticate to GKE
        id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: gtfs-validator-snapshot-cluster
          location: us-east1
          credentials: ${{ secrets.GCP_SA_KEY }}
      - name: Deploy to GKE
        id: deploy-to-gke
        run: kubectl apply -f deployment.yaml
      - name: Expose service
        id: expose-service
        run: kubectl apply -f service.yaml
  set-up-kubernetes-for-latest-release:
    needs: [ push-latest-release-to-gar ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Get Latest Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create GKE cluster
        run: |
          gcloud container clusters create-auto gtfs-validator-latest-release-cluster --zone us-east1
      - name: Substitute values in deployment.yaml
        run: |
          sed -i -e "s/{{PROJECT_ID}}/${{ secrets.GCP_PROJECT_ID }}/" deployment.yaml
          sed -i -e "s/{{TAG}}/${{ steps.previoustag.outputs.tag }}/" deployment.yaml
          sed -i -e "s/{{DEPLOYMENT_NAME}}/gtfs-validator-latest-release-workload/g" deployment.yaml
      - name: Substitute values in service.yaml
        run: |
          sed -i -e "s/{{SERVICE_NAME}}/gtfs-validator-latest-release-service/" service.yaml
      - name: Authenticate to GKE
        id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: gtfs-validator-snapshot-cluster
          location: us-east1
          credentials: ${{ secrets.GCP_SA_KEY }}
      - name: Deploy to GKE
        id: deploy-to-gke
        run: kubectl apply -f deployment.yaml
      - name: Expose service
        id: expose-service
        run: kubectl apply -f service.yaml
#  retrieve-urls:
#  execute-snapshot-version:
#  execute-latest-release:
#  delete-snapshot-resources:
#  delete-latest-release-resources:
